{
	"info": {
		"_postman_id": "c1f2ca70-0f08-4466-bb27-117eadbb7efa",
		"name": "NGSI-LD Entity Relationships",
		"description": "This tutorial teaches **NGSI-LD** users about batch commands and entity relationships. The tutorial builds on the data\ncreated in the previous [Smart Farm example](https://github.com/FIWARE/tutorials.Getting-Started/tree/NGSI-LD) and\ncreates and associates a series of related data entities to create add sensors and farm workers to the farm.\n\nThe `docker-compose` file for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.Entity-Relationships/icon/GitHub-Mark-32px.png) [FIWARE 102: Batch Commands and Entity Relationships](https://github.com/Fiware/tutorials.Entity-Relationships)\n\nThis tutorial teaches **NGSI-LD** users about batch commands and entity relationships. The tutorial builds on the data\ncreated in the previous [Smart Farm example](https://github.com/FIWARE/tutorials.Getting-Started/tree/NGSI-LD) and\ncreates and associates a series of related data entities to create add sensors and farm workers to the farm.\n\n# Understanding Entities and Relationships\n\nWithin the FIWARE platform, the context of an entity represents the state of a physical or conceptual object which\nexists in the real world.\n\n## Entities within a Farm Management Information System (FMIS)\n\nTo illustrate entity relationships within an FMIS system based on NGSI-LD, we will need to create a series of entities.\nFor this simplified FMIS, we will only need a small number entities. The relationship between our entities is defined as\nshown:\n\n![](https://fiware.github.io/tutorials.Entity-Relationships/img/ngsi-ld-entities.png)\n\n-   A building, such as a barn, is a real world bricks and mortar construct. **Building** entities would have properties\n    such as:\n    -   A name of the building e.g. \"The Big Red Barn\"\n    -   The category of the building (e.g. \"barn\")\n    -   An address \"Friedrichstraße 44, 10969 Kreuzberg, Berlin\"\n    -   A physical location e.g. _52.5075 N, 13.3903 E_\n    -   A filling level - the degree to which the building is full.\n    -   A temperature - e.g. _21 °C_\n    -   An association to the owner of the building (a real person)\n-   Smart devices such as **TemperatureSensors** or **FillingLevelSensors** would extend a common **Device** data model.\n    Each **Device** entity would have properties such as:\n    -   A description of the device\n    -   The category of device (e.g. _sensor_, _actuator_, _both_)\n    -   The name of the property they are measuring (e.g. _temperature_)\n    -   An association to the asset (e.g. building) they are measuring\n-   A **person** is an entity representing a farmer or farm labourer. Each **Person** entity would have properties such\n    as:\n    -   A name of the person e.g. \"Mr. Jones\"\n    -   A job title\n    -   An association to the farm buildings they own.\n-   A task something we do down on the farm. It is a conceptual entity, used to associate workers, agricultural products\n    and locations **Task** entities would have properties such as:\n    -   The name of the task (e.g. _Spray Herbicide XXX on field Y_)\n    -   The status of the task (e.g. _scheduled_, _in progress_, _completed_)\n    -   An association to the worker (i.e. a **Person** entity) who performs the task\n    -   An association to the product (e.g. **Herbicide** entity) to be used.\n    -   An association to the location (e.g. **PartField** entity) to be used.\n\nAs you can see, each of the entities defined above contain a mixture of static and dynamic data. Some properties are\nliable to change. A **Herbicide** could change its `formula`, hay could be sold and the `fillingLevel` of the barn could\nbe reduced and so on.\n\n> **Note** this tutorial uses the following typographic styling :\n>\n> -   Entity types have been made **bold text**\n> -   Data attributes are written in `monospace text`\n> -   Items in the real world use plain text\n>\n> Therefore a person in the real world is represented in the context data by a **Person** entity, and a real world barn\n> owned by a person is represented in the context data by a **Building** entity which has a `owner` attribute.\n\n# Architecture\n\nThe demo FMIS application will send and receive NGSI-LD calls to a compliant context broker. Since the standardized\nNGSI-LD interface is available across multiple context brokers, so we only need to pick one - for example the\n[Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/). The application will therefore only make use of\none FIWARE component.\n\nCurrently, the Orion Context Broker relies on open source [MongoDB](https://www.mongodb.com/) technology to keep\npersistence of the context data it holds.\n\nTo promote interoperability of data exchange, NGSI-LD context brokers explicitly expose a\n[JSON-LD `@context` file](https://json-ld.org/spec/latest/json-ld/#the-context) to define the data held within the\ncontext entities. This defines a unique URI for every entity type and every attribute so that other services outside of\nthe NGSI domain are able to pick and choose the names of their data structures. Every `@context` file must be available\non the network. In our case the tutorial application will be used to host a series of static files.\n\nTherefore, the architecture will consist of three elements:\n\n-   The [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests using\n    [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/gitlab/NGSI-LD/NGSI-LD/raw/master/spec/updated/full_api.json)\n-   The underlying [MongoDB](https://www.mongodb.com/) database :\n    -   Used by the Orion Context Broker to hold context data information such as data entities, subscriptions and\n        registrations\n-   The **Tutorial Application** does the following:\n    -   Offers static `@context` files defining the context entities within the system.\n\nSince all interactions between the two elements are initiated by HTTP requests, the entities can be containerized and\nrun from exposed ports.\n\n![](https://fiware.github.io/tutorials.Entity-Relationships/img/architecture-ld.png)\n\nThe necessary configuration information can be seen in the services section of the associated `docker-compose.yml` file.\nIt has been described in a [previous tutorial](https://github.com/FIWARE/tutorials.Getting-Started/tree/NGSI-LD)\n\n# Prerequisites\n\n## Docker and Docker Compose\n\nTo keep things simple both components will be run using [Docker](https://www.docker.com). **Docker** is a container\ntechnology which allows to different components isolated into their respective environments.\n\n-   To install Docker on Windows follow the instructions [here](https://docs.docker.com/docker-for-windows/)\n-   To install Docker on Mac follow the instructions [here](https://docs.docker.com/docker-for-mac/)\n-   To install Docker on Linux follow the instructions [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker applications. A\n[YAML file](https://raw.githubusercontent.com/Fiware/tutorials.Entity-Relationships/master/docker-compose.yml) is used\nconfigure the required services for the application. This means all container services can be brought up in a single\ncommand. Docker Compose is installed by default as part of Docker for Windows and Docker for Mac, however Linux users\nwill need to follow the instructions found [here](https://docs.docker.com/compose/install/)\n\nYou can check your current **Docker** and **Docker Compose** versions using the following commands:\n\n```console\ndocker-compose -v\ndocker version\n```\n\nPlease ensure that you are using Docker version 24.0.x or higher and Docker Compose 2.24.x  or higher and upgrade if\nnecessary.\n\n## WSL\n\nWe will start up our services using a simple Bash script. Windows users should download the [Windows Subsystem for Linux](https://learn.microsoft.com/en-us/windows/wsl/install)\nto provide a command-line functionality similar to a Linux distribution on Windows.\n\n# Start Up\n\nAll services can be initialised from the command-line by running the\n[services](https://github.com/FIWARE/tutorials.Entity-Relationships/blob/NGSI-LD/services) Bash script provided within\nthe repository. Please clone the repository and create the necessary images by running the commands as shown:\n\n```console\ngit clone https://github.com/FIWARE/tutorials.Entity-Relationships.git\ncd tutorials.Entity-Relationships\ngit checkout NGSI-LD\n\n./services start\n```\n\nThis command will also import seed data (**Building**, **Person**, **TemperatureSensor**, **FillingLevelSensor**,\n**Herbicide** and **PartField**) on startup.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Three Temperature Sensors",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n      \"id\": \"urn:ngsi-ld:TemperatureSensor:001\",\n      \"type\": \"TemperatureSensor\",\n      \"description\" : {\"type\": \"Property\", \"value\": \"Temperature Gauge 1\"},\n      \"category\": {\"type\": \"Property\", \"value\": \"sensor\"},\n      \"controlledProperty\" : {\"type\": \"Property\", \"value\": \"temperature\"},\n      \"temperature\": {\"type\": \"Property\", \"value\": 20, \"unitCode\": \"CEL\"}\n    },\n    {\n      \"id\": \"urn:ngsi-ld:TemperatureSensor:002\",\n      \"type\": \"TemperatureSensor\",\n      \"description\" : {\"type\": \"Property\", \"value\": \"Temperature Gauge 2\"},\n      \"category\": {\"type\": \"Property\", \"value\": \"sensor\"},\n      \"controlledProperty\" : {\"type\": \"Property\", \"value\": \"temperature\"},\n      \"temperature\": {\"type\": \"Property\", \"value\": 21, \"unitCode\": \"CEL\"}\n    },\n    {\n      \"id\": \"urn:ngsi-ld:TemperatureSensor:003\",\n      \"type\": \"TemperatureSensor\",\n      \"description\" : {\"type\": \"Property\", \"value\": \"Temperature Gauge 3\"},\n      \"category\": {\"type\": \"Property\", \"value\": \"sensor\"},\n      \"controlledProperty\" : {\"type\": \"Property\", \"value\": \"temperature\"},\n      \"temperature\": {\"type\": \"Property\", \"value\": 27, \"unitCode\": \"CEL\"}\n    }\n]"
				},
				"url": {
					"raw": "http://{{orion}}/ngsi-ld/v1/entityOperations/upsert",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entityOperations",
						"upsert"
					]
				},
				"description": "In the previous tutorial, we created each entity individually,\n\nLets create several sensors at the same time. This request uses the convenience batch processing endpoint to create five\nentities. Batch processing uses the `/ngsi-ld/v1/entityOperations/`endpoints and the `upsert` endpoints means we will\ncreate new entities if they are not present and overwrite existing entities if they exist.\n\nTo differentiate different **Device**, each temperature sensor has been assigned `type=TemperatureSensor`. Real-world\nproperties such as `category` have been added as properties to each device."
			},
			"response": []
		},
		{
			"name": "Create Three Filling Sensors",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n      \"id\": \"urn:ngsi-ld:FillingLevelSensor:001\",\n      \"type\": \"FillingLevelSensor\",\n      \"description\" : {\"type\": \"Property\", \"value\": \"Filling Level Sensor 1\"},\n      \"category\": {\"type\": \"Property\", \"value\": \"sensor\"},\n      \"controlledProperty\" : {\"type\": \"Property\", \"value\": \"fillingLevel\"},\n      \"fillingLevel\": {\"type\": \"Property\", \"value\": 1, \"unitCode\": \"C62\"}\n    },\n    {\n      \"id\": \"urn:ngsi-ld:FillingLevelSensor:002\",\n      \"type\": \"FillingLevelSensor\",\n      \"description\" : {\"type\": \"Property\", \"value\": \"Filling Level Sensor 2\"},\n      \"category\": {\"type\": \"Property\", \"value\": \"sensor\"},\n      \"controlledProperty\" : {\"type\": \"Property\", \"value\": \"fillingLevel\"},\n      \"fillingLevel\": {\"type\": \"Property\", \"value\": 0.9, \"unitCode\": \"C62\"}\n    },\n    {\n      \"id\": \"urn:ngsi-ld:FillingLevelSensor:003\",\n      \"type\": \"FillingLevelSensor\",\n      \"description\" : {\"type\": \"Property\", \"value\": \"Filling Gauge 3\"},\n      \"category\": {\"type\": \"Property\", \"value\": \"sensor\"},\n      \"controlledProperty\" : {\"type\": \"Property\", \"value\": \"fillingLevel\"},\n      \"fillingLevel\": {\"type\": \"Property\", \"value\": 0.8, \"unitCode\": \"C62\"}\n    }\n]"
				},
				"url": {
					"raw": "http://{{orion}}/ngsi-ld/v1/entityOperations/upsert",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entityOperations",
						"upsert"
					]
				},
				"description": "Similarly, we can create a series of **FillingLevelSensors** entities by using the `type=FillingLevelSensor`.\n\nIn both cases we have encoded each entity `id` according to the NGSI-LD\n[specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf) - the proposal\nis that each `id` is a URN follows a standard format: `urn:ngsi-ld:<entity-type>:<entity-id>`. This will mean that every\n`id` in the system will be unique."
			},
			"response": []
		},
		{
			"name": "Obtain Device Information",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=TemperatureSensor,FillingLevelSensor&options=keyValues",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entities",
						""
					],
					"query": [
						{
							"key": "type",
							"value": "TemperatureSensor,FillingLevelSensor"
						},
						{
							"key": "options",
							"value": "keyValues"
						}
					]
				},
				"description": "Device information can be requested by making a GET request on the `/ngsi-ld/v1/entities` endpoint. For example to\nreturn the context data of the devices.\n\nAs you can see there are currently three additional property attributes present `description`, `category` and\n`controlledProperty`"
			},
			"response": []
		},
		{
			"name": "Adding a Foreign Key Relationship",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"id\": \"urn:ngsi-ld:TemperatureSensor:001\",\n        \"type\": \"TemperatureSensor\",\n        \"controllingAsset\": {\n            \"type\": \"Relationship\",\n            \"object\": \"urn:ngsi-ld:Building:farm001\"\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:TemperatureSensor:002\",\n        \"type\": \"TemperatureSensor\",\n        \"controllingAsset\": {\n            \"type\": \"Relationship\",\n            \"object\": \"urn:ngsi-ld:Building:barn002\"\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:FillingLevelSensor:003\",\n        \"type\": \"FillingLevelSensor\",\n        \"controllingAsset\": {\n            \"type\": \"Relationship\",\n            \"object\": \"urn:ngsi-ld:Building:farm002\"\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:FillingLevelSensor:001\",\n        \"type\": \"FillingLevelSensor\",\n        \"controllingAsset\": {\n            \"type\": \"Relationship\",\n            \"object\": \"urn:ngsi-ld:Building:farm001\"\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:FillingLevelSensor:002\",\n        \"type\": \"FillingLevelSensor\",\n        \"controllingAsset\": {\n            \"type\": \"Relationship\",\n            \"object\": \"urn:ngsi-ld:Building:barn002\"\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:TemperatureSensor:003\",\n        \"type\": \"TemperatureSensor\",\n        \"controllingAsset\": {\n            \"type\": \"Relationship\",\n            \"object\": \"urn:ngsi-ld:Building:farm002\"\n        }\n    }\n]"
				},
				"url": {
					"raw": "http://{{orion}}/ngsi-ld/v1/entityOperations/update?options=update",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entityOperations",
						"update"
					],
					"query": [
						{
							"key": "options",
							"value": "update"
						}
					]
				},
				"description": "In databases, foreign keys are often used to designate a one-to-many relationship - for example a building can hold many\ndevices. In order to remember this information we need to add an association relationship similar to a foreign key.\nBatch processing can again be used to amend the existing the **TemperatureSensor** and **FillingLevelSensor** entities\nto add a `controllingAsset` attribute holding the relationship to each building controlled by the device. According to\nthe Smart Data Model [Device](https://swagger.lab.fiware.org/?url=https://smart-data-models.github.io/dataModel.Device/Device/swagger.yaml)\ndefinition `https://uri.fiware.org/ns/data-models#controllingAsset` is the URI long name to be used for this\nrelationship, and the value of the `controllingAsset` attribute corresponds to a URN associated to a **Building** entity\nitself.\n\nThe URN follows a standard format: `urn:ngsi-ld:<entity-type>:<entity-id>`.\n\nThe following request associates six devices to `urn:ngsi-ld:Building:farm001`, `urn:ngsi-ld:Building:barn002` and\n`urn:ngsi-ld:Building:farm002`.\n\n"
			},
			"response": []
		},
		{
			"name": "Obtain Updated Device Information",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:1026/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001?options=keyValues",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1026",
					"path": [
						"ngsi-ld",
						"v1",
						"entities",
						"urn:ngsi-ld:TemperatureSensor:001"
					],
					"query": [
						{
							"key": "options",
							"value": "keyValues"
						},
						{
							"key": "type",
							"value": "Shelf",
							"description": "Entity type",
							"disabled": true
						}
					]
				},
				"description": "Now when the devcie information is requested again, the response has changed and includes a new property\n`controllingAsset`, which has been added in the previous step."
			},
			"response": []
		},
		{
			"name": "Obtain a Foreign Key URN",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"name": "Accept"
					}
				],
				"url": {
					"raw": "http://localhost:1026/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001?options=keyValues&attrs=controllingAsset",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1026",
					"path": [
						"ngsi-ld",
						"v1",
						"entities",
						"urn:ngsi-ld:TemperatureSensor:001"
					],
					"query": [
						{
							"key": "options",
							"value": "keyValues"
						},
						{
							"key": "type",
							"value": "Shelf",
							"description": "Entity type",
							"disabled": true
						},
						{
							"key": "attrs",
							"value": "controllingAsset"
						}
					]
				},
				"description": "We can also make a request to retrieve the `controllingAsset` attribute relationship information from a known **Device**\nentity by using the `options=keyValues` setting.\n\n\nThis can be interpreted as _\"I am making sensor readings inside the **Building** entity with the\n`id=urn:ngsi-ld:Building:farm001`\"_"
			},
			"response": []
		},
		{
			"name": "Reading from Parent Entity to Child Entity",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{orion}}/ngsi-ld/v1/entities?q=controllingAsset==\"urn:ngsi-ld:Building:farm001\"&options=keyValues&attrs=controllingAsset",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entities"
					],
					"query": [
						{
							"key": "q",
							"value": "controllingAsset==\"urn:ngsi-ld:Building:farm001\""
						},
						{
							"key": "options",
							"value": "keyValues"
						},
						{
							"key": "attrs",
							"value": "controllingAsset"
						}
					]
				},
				"description": "Reading from a parent to a child can be done using the following query.\n\nThis request is asking for the `id` of all **Device** entities associated to the URN `urn:ngsi-ld:Building:farm001`, the\nresponse is a JSON array as shown.\n\nIn plain English, this can be interpreted as _\"There are two devices in `urn:ngsi-ld:Building:farm001`\"_. The request can\nbe altered use the `count=true` to return the number of entities which fulfill the criteria.\n\nThis returns an HTTP Header as part of the response which indicates the number of affected entities."
			},
			"response": []
		},
		{
			"name": "Creating many-to-many Relationships",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"urn:ngsi-ld:Task:001\",\n    \"type\": \"Task\",\n    \"worker\": {\n        \"type\": \"Relationship\",\n        \"object\": \"urn:ngsi-ld:Person:001\"\n    },\n    \"field\": {\n        \"type\": \"Relationship\",\n        \"object\": \"urn:ngsi-ld:PartField:002\"\n    },\n    \"product\": {\n        \"type\": \"Relationship\",\n        \"object\": \"urn:ngsi-ld:Herbicide:001\"\n    },\n    \"description\": {\n        \"type\": \"Property\",\n        \"value\": \"Spray the North Field with Agent Orange\"\n    },\n    \"status\": {\n        \"type\": \"Property\",\n        \"value\": \"scheduled\"\n    },\n    \"dueDate\": {\n        \"type\": \"Property\",\n        \"value\": \"2021-07-16\"\n    }\n}"
				},
				"url": {
					"raw": "http://{{orion}}/ngsi-ld/v1/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entities",
						""
					]
				},
				"description": "Bridge Tables are often used to relate many-to-many relationships. For example, every spraying activity within the FMIS\nwill need to associate a farm worker, a product to apply, and a location to apply the treatment (known as a\n**PartField**)\n\nIn order to hold the context information to \"direct a worker to spray a herbicide onto a field\" we will need to create a\nnew data entity **Task** which exists to associate data from other entities. It has a foreign key relationship to the\n**Person**, **Herbicide** and **PartField** entities and therefore requires relationship attributes called `field`,\n`herbicide` and `worker`.\n\nAssigning a task is simply done by creating an entity holding the relationship information and any other additional\nproperties (such as `description` and `status`)"
			},
			"response": []
		},
		{
			"name": "Reading from a bridge table (1)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"name": "Accept"
					}
				],
				"url": {
					"raw": "http://{{orion}}/ngsi-ld/v1/entities/?q=field==\"urn:ngsi-ld:PartField:002\"&options=keyValues&attrs=worker&type=Task",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entities",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "field==\"urn:ngsi-ld:PartField:002\""
						},
						{
							"key": "options",
							"value": "keyValues"
						},
						{
							"key": "attrs",
							"value": "worker"
						},
						{
							"key": "type",
							"value": "Task"
						}
					]
				},
				"description": "When reading from a bridge table entity, the `type` of the entity must be known.\n\nAfter creating at least one **Task** entity we can query _Which workers are assigned activities in field\n`urn:ngsi-ld:PartField:002`?_ by making the following request:\n\n"
			},
			"response": []
		},
		{
			"name": "Reading from a bridge table (2)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"name": "Accept"
					}
				],
				"url": {
					"raw": "http://{{orion}}/ngsi-ld/v1/entities/?q=product==\"urn:ngsi-ld:Herbicide:001\"&options=keyValues&attrs=field&type=Task",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entities",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "product==\"urn:ngsi-ld:Herbicide:001\""
						},
						{
							"key": "options",
							"value": "keyValues"
						},
						{
							"key": "attrs",
							"value": "field"
						},
						{
							"key": "type",
							"value": "Task"
						}
					]
				},
				"description": "Similarly we can request _Which fields are treated using `urn:ngsi-ld:Herbicide:001`?_ by altering the request as shown:"
			},
			"response": []
		},
		{
			"name": "Relationships of Properties",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Link",
						"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"name": "Accept"
					}
				],
				"url": {
					"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Building:farm001?attrs=temperature",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entities",
						"urn:ngsi-ld:Building:farm001"
					],
					"query": [
						{
							"key": "attrs",
							"value": "temperature"
						}
					]
				},
				"description": "_Properties-of-Properties_ and _Relationships of Properties_ are metadata. The addition of metadata entities such as\nthese into the context data allows users to navigate the graph of entities relationships and gain further insights about\nthe state of the system.\n\n### Retrieving the Temperature of a Barn\n\nThe temperature readings from a temperature sensor have already been discussed. It may also be necessary to duplicate\nthis data into another entity. For example, the temperature reading of a sensor in the barn is also the temperature\nreading of the barn itself. A dummy reading has already been added into the `urn:ngsi-ld:Building:farm001` Entity and\ncan be retrieved with a GET request.\n\nAs you can see the `temperature` Property holds additional information regarding the provider of the measurement, this\nwill allow additional inferences to be made."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orion",
			"value": "localhost:1026"
		},
		{
			"key": "ngsi-context.jsonld",
			"value": "http://context/ngsi-context.jsonld"
		}
	]
}